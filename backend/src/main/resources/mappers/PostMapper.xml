<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.goboogie.repository.post.PostMapper">

    <resultMap id="PostResultMap" type="project.goboogie.domain.Post">
        <id property="postId" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <insert id="save" parameterType="project.goboogie.domain.Post" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO posts (user_id, title, content, created_at, updated_at)
        VALUES (#{userId}, #{title}, #{content}, NOW(), NOW())
    </insert>

    <select id="findById" parameterType="int" resultMap="PostResultMap">
        SELECT * FROM posts WHERE post_id = #{postId}
    </select>

    <select id="findAll" resultMap="PostResultMap">
        SELECT * FROM posts
    </select>

    <update id="update" parameterType="project.goboogie.domain.Post">
        UPDATE posts
        SET title = #{title}, content = #{content}, updated_at = NOW()
        WHERE post_id = #{postId}
    </update>

    <delete id="deleteById" parameterType="int">
        DELETE FROM posts WHERE post_id = #{postId}
    </delete>

    <!-- 좋아요가 가장 많은 게시글 5개 가져오기 -->
    <resultMap id="PostWithMediaResultMap" type="project.goboogie.dto.PostWithMediaDTO">
        <id property="postId" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="mediaId" column="media_id"/>
        <result property="mediaUrl" column="media_url"/>
        <result property="mediaType" column="media_type"/>
        <result property="mediaCreatedAt" column="media_created_at"/>
        <result property="likeCount" column="like_count"/> <!-- 추가 -->
        <result property="commentCount" column="comment_count"/> <!-- 추가 -->
    </resultMap>


    <select id="findTopPostsByLikes" resultMap="PostWithMediaResultMap">
        SELECT
        p.post_id,
        p.user_id,
        p.title,
        p.content,
        p.created_at,
        p.updated_at,
        m.media_id,
        m.media_url,
        m.media_type,
        m.created_at AS media_created_at
        FROM posts p
        LEFT JOIN (
        SELECT post_id, COUNT(*) AS like_count
        FROM likes
        GROUP BY post_id
        ) l ON p.post_id = l.post_id
        LEFT JOIN media m ON p.post_id = m.post_id
        ORDER BY l.like_count DESC, p.created_at DESC
        LIMIT 5
    </select>

    <!-- 최근게시글 가져오기 created_at을 기준으로 정렬하여 최신 게시글을 가져오는 쿼리-->
    <select id="findRecentPosts" resultMap="PostWithMediaResultMap">
        SELECT
        p.post_id,
        p.user_id,
        p.title,
        p.content,
        p.created_at,
        p.updated_at,
        m.media_id,
        m.media_url,
        m.media_type,
        m.created_at AS media_created_at,
        COALESCE(l.like_count, 0) AS like_count,
        COALESCE(c.comment_count, 0) AS comment_count
        FROM posts p
        LEFT JOIN media m ON p.post_id = m.post_id
        LEFT JOIN (
        SELECT post_id, COUNT(*) AS like_count
        FROM likes
        GROUP BY post_id
        ) l ON p.post_id = l.post_id
        LEFT JOIN (
        SELECT post_id, COUNT(*) AS comment_count
        FROM comments
        GROUP BY post_id
        ) c ON p.post_id = c.post_id
        <where>
            <if test="title != null and title != ''">
                AND p.title LIKE CONCAT('%', #{title}, '%')
            </if>
        </where>
        ORDER BY p.created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>



</mapper>